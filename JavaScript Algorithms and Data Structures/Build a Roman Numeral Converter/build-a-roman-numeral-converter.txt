** start of index.html **

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Roman Numeral Converter</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <header>
            <h1>Roman Numeral <br>
              Converter</h1>
    </header>
    <main>
      <div class="container">
        <label for="number">Enter a number:</label>
        <input type="number" id="number" required />
        <button type="button" id="convert-btn">Convert</button>
        <button id="reset-btn">Reset</button>
      </div>
      <div id="output" class="output hidden"></div>
    </main>
    <footer><p>&copy; 2025 Roman Numeral Converter. All rights reserved.</p>
    </footer>
    <script src="script.js"></script>
  </body>
</html>

** end of index.html **

** start of styles.css **

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

:root {
  --light-grey: #f5f6f7;
  --dark-blue: #1b1b32;
  --danger-background: #ffadad;
}

body {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: Arial, sans-serif;
  font-size: 1.125rem;
  color: var(--light-grey);
  background-color: var(--dark-blue);
  padding: 0 4px;
}

h1 {
  font-size: 2.125rem;
  text-align: center;
  margin: 20px 0;
}

footer {
    position: relative;
    margin-top: auto;
    padding: 20px 0;
    text-align: center;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #f5f6f7;
  margin: auto 25px;
  padding: 15px auto;
  border: 3px solid #f5f6f7;
  width: min(100vw, 450px);
  min-height: 300px;
  background-color: #3b3b4f;
}

label {
  display: inline-block;
  font-size: 1.5rem;
  margin-bottom: 10px;
}

input {
  display: block;
  font-size: 2.5rem;
  width: 80%;
  height: 50px;
  padding: 6px 12px;
  margin: 10px 0;
  line-height: 1.4;
  color: white;
  border: 1px solid #f5f6f7;
  background-color: #0a0a23;
}

button {
  cursor: pointer;
  margin-top: 15px;
  text-decoration: none;
  background-image: linear-gradient(#fecc4c, #ffac33);
  border: 3px solid #feac32;
  padding: 10px 16px;
  font-size: 23px;
  width: 80%;
  font-weight: bold;
}
.output {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #f5f6f7;
  margin: 25px 25px;
  padding: 15px auto;
  border: 3px solid #f5f6f7;
  width: min(100vw, 450px);
  min-height: 100px;
  background-color: #3b3b4f;
  text-align: center;
}
/*
.alert {
  font-size: 2rem;
  background-color: var(--danger-background);
  border: 3px solid #850000;
  color: #850000;
}
*/
.hidden {
  display: none;
}

** end of styles.css **

** start of script.js **

const numberInput = document.getElementById("number");
const convertBtn = document.getElementById("convert-btn");
const output = document.getElementById("output");
const resetBtn = document.getElementById("reset-btn");

const checkUserInput = () => {
  const inputInt = parseInt(numberInput.value);
  let errmsg = "";

  if (!numberInput.value || isNaN(inputInt)) {
    //alert("Please enter a valid number");
    errmsg = "Please enter a valid number";
  }else if (inputInt < 1) {
    //alert("Please enter a number greater than or equal to 1");
    errmsg = "Please enter a number greater than or equal to 1";
  }else if (inputInt >= 4000) {
    //alert("Please enter a number less than or equal to 3999");
    errmsg = "Please enter a number less than or equal to 3999";
  }

  if (errmsg) {
    output.textContent = errmsg;
    output.classList.remove("hidden");
  } else {
    const roman = convertToRoman(inputInt);
    output.textContent = roman;
    output.classList.remove("hidden");
  }

};

const convertToRoman = (input) => {
  const ref = [
    {M:1000},
    {CM: 900},
    {D: 500},
    {CD: 400},
    {C: 100},
    {XC: 90},
    {L: 50},
    {XL: 40},
    {X: 10},
    {IX: 9},
    {V: 5},
    {IV: 4},
    {I: 1}
  ];
  if (input === 0) return "";
  for (let i = 0; i < ref.length; i++) {
    const key = Object.keys(ref[i])[0];
    const value = ref[i][key];
    if (input >= value) {
      return key + convertToRoman(input - value); // recursion
    }
  }
};

const resetOutput = () => {
  output.textContent = "";
  output.classList.add("hidden");
  numberInput.value = "";
};


convertBtn.addEventListener("click", checkUserInput);

resetBtn.addEventListener("click", resetOutput);

numberInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    checkUserInput();
  }
});

** end of script.js **

